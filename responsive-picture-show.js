// Generated by CoffeeScript 1.6.1
(function (plugin, window) {
    var factory = function($){
        return plugin($, window);
    }
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function(){
    var Plugin, defaults, pluginName;
    pluginName = "slidesjs";
    defaults = {
        width: 940,
        height: 528,
        start: 1,
        event:"click",
        navigation: {
            active: true,
            effect: "slide"
        },
        pagination: {
            active: true,
            effect: "slide"
        },
        thumbnail:{
            active:false,
            element:false
        },
        tabMask: {
            active:false,
            element:false,
            direction: "left"
        },
        play: {
            active: false,
            effect: "slide",
            interval: 5000,
            auto: false,
            swap: true,
            pauseOnHover: false,
            restartDelay: 2500
        },
        effect: {
            slide: {
                speed: 500
            },
            fade: {
                speed: 300,
                crossfade: true
            }
        },
        callback: {
            loaded: function() {},
            start: function() {},
            complete: function() {}
        }
    };
    Plugin = (function() {
        function Plugin(element, options) {
            this.element = element;
            this.options = $.extend(true, {}, defaults, options);
            this._defaults = defaults;
            this._name = pluginName;
            this.init();
        }
        return Plugin;
    })();
    Plugin.prototype.init = function() {
        var $element, nextButton, pagination, playButton, prevButton, stopButton,thumbnail,
            _this = this;
        $element = $(this.element);
        this.data = $.data(this);
        $.data(this, "animating", false);
        $.data(this, "total", $element.children().not(".slidesjs-nav批热igation", $element).length);
        $.data(this, "current", this.options.start - 1);
        $.data(this, "vendorPrefix", this._getVendorPrefix());
        if (typeof TouchEvent !== "undefined") {
            $.data(this, "touch", true);
            this.options.effect.slide.speed = this.options.effect.slide.speed / 2;
        }
        $element.css({
            overflow: "hidden"
        });
        $element.slidesContainer = $element.children().not(".slidesjs-navigation", $element).wrapAll("<div class='slidesjs-container'>", $element).parent().css({
            overflow: "hidden",
            position: "relative"
        });
        $(".slidesjs-container", $element).wrapInner("<div class='slidesjs-control'>", $element).children();
        $(".slidesjs-control", $element).css({
            position: "relative",
            left: 0
        });
        $(".slidesjs-control", $element).children().addClass("slidesjs-slide").css({
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            zIndex: 0,
            display: "none"
        });
        $.each($(".slidesjs-control", $element).children(), function(i) {
            var $slide;
            $slide = $(this);
            return $slide.attr("slidesjs-index", i);
        });
        if (this.data.touch) {
            $(".slidesjs-control", $element).on("touchstart", function(e) {
                return _this._touchstart(e);
            });
            $(".slidesjs-control", $element).on("touchmove", function(e) {
                return _this._touchmove(e);
            });
            $(".slidesjs-control", $element).on("touchend", function(e) {
                return _this._touchend(e);
            });
        }
        $element.fadeIn(0);
        this.update();
        if (this.data.touch) {
            this._setuptouch();
        }
        $(".slidesjs-control", $element).children(":eq(" + this.data.current + ")").eq(0).fadeIn(0, function() {
            return $(this).css({
                zIndex: 10
            });
        });
        if (this.options.navigation.active) {
            var $nextBtn,$prevBtn;
            if(this.options.navigation.nextButton || this.options.navigation.nextButton){
                $nextBtn = $(this.options.navigation.nextButton);
                $prevBtn = $(this.options.navigation.prevButton);
                $($nextBtn).click(function(e) {
                    e.preventDefault();
                    _this.stop(true);
                    return _this.next(_this.options.navigation.effect);
                });
                $($prevBtn).click(function(e) {
                    e.preventDefault();
                    _this.stop(true);
                    return _this.previous(_this.options.navigation.effect);
                });
            }else {
                prevButton = $("<a>", {
                    "class": "slidesjs-previous slidesjs-navigation",
                    href: "#"
                }).appendTo($element);
                nextButton = $("<a>", {
                    "class": "slidesjs-next slidesjs-navigation",
                    href: "#"
                }).appendTo($element);
            }
            $.data(this,"nextButton",nextButton);
            $.data(this,"prevButton",prevButton);
            if(this.data.total == 1){
                this.data.prevButton.hide();
                this.data.nextButton.hide();
            }
            if(this.data.current <= 0){
                this.data.prevButton.hide();
            }
        }
        $(".slidesjs-next", $element).click(function(e) {
            e.preventDefault();
            _this.stop(true);
            return _this.next(_this.options.navigation.effect);
        });
        $(".slidesjs-previous", $element).click(function(e) {
            e.preventDefault();
            _this.stop(true);
            return _this.previous(_this.options.navigation.effect);
        });
        if (this.options.play.active) {
            playButton = $("<a>", {
                "class": "slidesjs-play slidesjs-navigation",
                href: "#",
                title: "Play",
                text: "Play"
            }).appendTo($element);
            stopButton = $("<a>", {
                "class": "slidesjs-stop slidesjs-navigation",
                href: "#",
                title: "Stop",
                text: "Stop"
            }).appendTo($element);
            playButton.click(function(e) {
                e.preventDefault();
                return _this.play(true);
            });
            stopButton.click(function(e) {
                e.preventDefault();
                return _this.stop(true);
            });
            if (this.options.play.swap) {
                stopButton.css({
                    display: "none"
                });
            }
        }
        if (this.options.pagination.active) {
            pagination = $("<ul>", {
                "class": "slidesjs-pagination"
            }).appendTo($element);
            $.each(new Array(this.data.total), function(i) {
                var paginationItem, paginationLink;
                paginationItem = $("<li>", {
                    "class": "slidesjs-pagination-item"
                }).appendTo(pagination);
                paginationLink = $("<a>", {
                    href: "#",
                    "data-slidesjs-item": i,
                    html: i + 1
                }).appendTo(paginationItem);
                return paginationLink.bind(_this.options.event,function(e) {
                    e.preventDefault();
                    return _this.goto(($(e.currentTarget).attr("data-slidesjs-item") * 1) + 1);
                });
            });
        }
        if(this.options.thumbnail.active){
            if(this.options.thumbnail.element){
                var element = this.options.thumbnail.element;
                $(".slidesjs-thumbnail-item",element).click(function(){
                    var index = $(this).index();
                    _this.goto(index+1);
                })
            }else {
                var thumbnailArray = [];
                $(".slidesjs-slide",$element).each(function(index,item){
                    var url = $("img",item).data("url");
                    thumbnailArray.push(url);
                })
                thumbnail = $("<ul>", {
                    "class": "slidesjs-thumbnail"
                }).appendTo($element);

                $.each(new Array(this.data.total), function(i) {
                    var thumbnailItem, thumbnailLink,thumbnailImg;
                    thumbnailItem = $("<li>", {
                        "class": "slidesjs-thumbnail-item",
                        "data-slidesjs-item": i
                    }).appendTo(thumbnail);
                    thumbnailLink = $("<a>", {
                        href: "#"
                    }).appendTo(thumbnailItem);
                    thumbnailImg = $("<img>", {
                        src: thumbnailArray[i]
                    }).appendTo(thumbnailLink);
                    return thumbnailItem.click(function(e) {
                        e.preventDefault();
                        _this.stop(true);
                        return _this.goto(($(e.currentTarget).attr("data-slidesjs-item") * 1) + 1);
                    });
                });
                if(this.options.tabMask.active){
                    var slidesjsMask,slidesjsArrow;
                    slidesjsMask = $("<div>",{
                        "class": "thumbnail-image-mask"
                    }).appendTo($element);
                    if(this.options.tabMask.dition == "left"){
                        slidesjsArrow = $("<span>",{
                            "class" :"top-arrow-ico"
                        }).appendTo(slidesjsMask);
                    }else if(this.options.tabMask.direction == "top") {
                        slidesjsArrow = $("<span>",{
                            "class" :"left-arrow-ico"
                        }).appendTo(slidesjsMask);
                    }
                }
            }
        }

        $(window).bind("resize", function() {
            return _this.update();
        });
        this._setActive();
        if (this.options.play.auto) {
            this.play();
        }
        return this.options.callback.loaded(this.options.start);
    };
    Plugin.prototype._setActive = function(number) {
        var $element, current;
        $element = $(this.element);
        this.data = $.data(this);
        current = number > -1 ? number : this.data.current;
        if(this.options.thumbnail.element){
            $(".active", this.options.thumbnail.element).removeClass("active");
        }else {
            $(".active", $element).removeClass("active");
        }
        if (this.data.vendorPrefix) {
            $(".animate", $element).removeClass("animate");
            $(".slidesjs-pagination li:eq(" + current + ") a", $element).addClass("animate active");
            if(this.options.thumbnail.element){
                $(".slidesjs-thumbnail-item:eq(" + current + ")", this.options.thumbnail.element).addClass("active");
            }else {
                $(".slidesjs-thumbnail li:eq(" + current + ")", $element).addClass("active");
            }
        }else {
            $(".slidesjs-pagination li:eq(" + current + ") a", $element).addClass("active");
            $(".slidesjs-thumbnail li:eq(" + current + ") a", $element).addClass("active");
            if(this.options.thumbnail.element){
                $(".slidesjs-thumbnail-item:eq(" + current + ")", this.options.thumbnail.element).addClass("active");
            }else {
                $(".slidesjs-thumbnail li:eq(" + current + ")", $element).addClass("active");
            }
        }
    };
    Plugin.prototype.update = function() {
        var $element, height, width;
        $element = $(this.element);
        this.data = $.data(this);
        $(".slidesjs-control", $element).children(":not(:eq(" + this.data.current + "))").css({
            display: "none",
            left: 0,
            zIndex: 0
        });
        width = $element.width();
        height = (this.options.height / this.options.width) * width;
        this.options.width = width;
        this.options.height = height;
        return $(".slidesjs-control, .slidesjs-container", $element).css({
            width: width,
            height: height
        });
    };
    Plugin.prototype.next = function(effect) {
        var $element;
        $element = $(this.element);
        this.data = $.data(this);
        $.data(this, "direction", "next");
        if((this.data.current+1) >= (this.data.total-1)){
            this.data.nextButton.hide();
            this.data.prevButton.show();
        }else {
            this.data.prevButton.show();
        }
        if (effect === void 0) {
            effect = this.options.navigation.effect;
        }
        if (effect === "fade") {
            return this._fade();
        } else {
            return this._slide();
        }
    };
    Plugin.prototype.previous = function(effect) {
        var $element;
        $element = $(this.element);
        this.data = $.data(this);
        $.data(this, "direction", "previous");
        if(this.data.current-1 <= 0){
            this.data.prevButton.hide();
            this.data.nextButton.show();
        }else {
            this.data.nextButton.show();
        }
        if (effect === void 0) {
            effect = this.options.navigation.effect;
        }
        if (effect === "fade") {
            return this._fade();
        } else {
            return this._slide();
        }
    };
    Plugin.prototype.goto = function(number) {
        var $element, effect;
        if(this.data.nextButton && this.data.prevButton){
            this.data.nextButton.show();
            this.data.prevButton.show();
            if(number >= (this.data.total)){
                this.data.nextButton.hide();
                this.data.prevButton.show();
            }
            if(number <= 1){
                this.data.prevButton.hide();
                this.data.nextButton.show();
            }
        }

        $element = $(this.element);
        this.data = $.data(this);
        if (effect === void 0) {
            effect = this.options.pagination.effect;
        }
        if (number > this.data.total) {
            number = this.data.total;
        } else if (number < 1) {
            number = 1;
        }
        if (typeof number === "number") {
            if (effect === "fade") {
                return this._fade(number);
            } else {
                return this._slide(number);
            }
        } else if (typeof number === "string") {
            if (number === "first") {
                if (effect === "fade") {
                    return this._fade(0);
                } else {
                    return this._slide(0);
                }
            } else if (number === "last") {
                if (effect === "fade") {
                    return this._fade(this.data.total);
                } else {
                    return this._slide(this.data.total);
                }
            }
        }
    };
    Plugin.prototype._setuptouch = function() {
        var $element, next, previous, slidesControl;
        $element = $(this.element);
        this.data = $.data(this);
        slidesControl = $(".slidesjs-control", $element);
        next = this.data.current + 1;
        previous = this.data.current - 1;
        if (previous < 0) {
            previous = this.data.total - 1;
        }
        if (next > this.data.total - 1) {
            next = 0;
        }
        if(this.data.total == 1){
            return;
        }
        slidesControl.children(":eq(" + next + ")").css({
            display: "block",
            left: this.options.width
        });
        return slidesControl.children(":eq(" + previous + ")").css({
            display: "block",
            left: -this.options.width
        });
    };
    Plugin.prototype._touchstart = function(e) {
        var $element, touches;
        $element = $(this.element);
        this.data = $.data(this);
        touches = e.originalEvent.touches[0];
        this._setuptouch();
        $.data(this, "touchtimer", Number(new Date()));
        $.data(this, "touchstartx", touches.pageX);
        $.data(this, "touchstarty", touches.pageY);
        return e.stopPropagation();
    };
    Plugin.prototype._touchend = function(e) {
        var $element, duration, prefix, slidesControl, timing, touches, transform,
            _this = this;
        $element = $(this.element);
        this.data = $.data(this);
        touches = e.originalEvent.touches[0];
        slidesControl = $(".slidesjs-control", $element);
        if (slidesControl.position().left > this.options.width * 0.5 || slidesControl.position().left > this.options.width * 0.1 && (Number(new Date()) - this.data.touchtimer < 250)) {
            $.data(this, "direction", "previous");
            this._slide();
        } else if (slidesControl.position().left < -(this.options.width * 0.5) || slidesControl.position().left < -(this.options.width * 0.1) && (Number(new Date()) - this.data.touchtimer < 250)) {
            $.data(this, "direction", "next");
            this._slide();
        } else {
            prefix = this.data.vendorPrefix;
            transform = prefix + "Transform";
            duration = prefix + "TransitionDuration";
            timing = prefix + "TransitionTimingFunction";
            slidesControl[0].style[transform] = "translateX(0px)";
            slidesControl[0].style[duration] = this.options.effect.slide.speed * 0.85 + "ms";
        }
        slidesControl.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function() {
            prefix = _this.data.vendorPrefix;
            transform = prefix + "Transform";
            duration = prefix + "TransitionDuration";
            timing = prefix + "TransitionTimingFunction";
            slidesControl[0].style[transform] = "";
            slidesControl[0].style[duration] = "";
            return slidesControl[0].style[timing] = "";
        });
        return e.stopPropagation();
    };
    Plugin.prototype._touchmove = function(e) {
        var $element, prefix, slidesControl, touches, transform;
        $element = $(this.element);
        this.data = $.data(this);
        touches = e.originalEvent.touches[0];
        prefix = this.data.vendorPrefix;
        slidesControl = $(".slidesjs-control", $element);
        transform = prefix + "Transform";
        $.data(this, "scrolling", Math.abs(touches.pageX - this.data.touchstartx) < Math.abs(touches.pageY - this.data.touchstarty));
        if (!this.data.animating && !this.data.scrolling) {
            e.preventDefault();
            this._setuptouch();
            slidesControl[0].style[transform] = "translateX(" + (touches.pageX - this.data.touchstartx) + "px)";
        }
        return e.stopPropagation();
    };
    Plugin.prototype.play = function(next) {
        var $element, currentSlide, slidesContainer,
            _this = this;
        $element = $(this.element);
        this.data = $.data(this);
        if (!this.data.playInterval) {
            if (next) {
                currentSlide = this.data.current;
                this.data.direction = "next";
                if (this.options.play.effect === "fade") {
                    this._fade();
                } else {
                    this._slide();
                }
            }
            $.data(this, "playInterval", setInterval((function() {
                currentSlide = _this.data.current;
                _this.data.direction = "next";
                if (_this.options.play.effect === "fade") {
                    return _this._fade();
                } else {
                    return _this._slide();
                }
            }), this.options.play.interval));
            slidesContainer = $(".slidesjs-container", $element);
            if (this.options.play.pauseOnHover) {
                slidesContainer.unbind();
                slidesContainer.bind("mouseenter", function() {
                    return _this.stop();
                });
                slidesContainer.bind("mouseleave", function() {

                    if (_this.options.play.restartDelay) {
                        return $.data(_this, "restartDelay", setTimeout((function() {
                            return _this.play(true);
                        }), _this.options.play.restartDelay));
                    } else {
                        return _this.play();
                    }
                });
            }
            $.data(this, "playing", true);
            $(".slidesjs-play", $element).addClass("slidesjs-playing");
            if (this.options.play.swap) {
                $(".slidesjs-play", $element).hide();
                return $(".slidesjs-stop", $element).show();
            }
        }
    };
    Plugin.prototype.stop = function(clicked) {
        var $element;
        $element = $(this.element);
        this.data = $.data(this);
        clearInterval(this.data.playInterval);
        if (this.options.play.pauseOnHover && clicked) {
            $(".slidesjs-container", $element).unbind();
        }
        $.data(this, "playInterval", null);
        $.data(this, "playing", false);
        $(".slidesjs-play", $element).removeClass("slidesjs-playing");
        if (this.options.play.swap) {
            $(".slidesjs-stop", $element).hide();
            return $(".slidesjs-play", $element).show();
        }
    };
    Plugin.prototype._slide = function(number) {
        var $element, currentSlide, direction, duration, next, prefix, slidesControl, timing, transform, value,
            _this = this;
        $element = $(this.element);
        this.data = $.data(this);
        if (!this.data.animating && number !== this.data.current + 1) {
            $.data(this, "animating", true);
            currentSlide = this.data.current;
            if (number > -1) {
                number = number - 1;
                value = number > currentSlide ? 1 : -1;
                direction = number > currentSlide ? -this.options.width : this.options.width;
                next = number;
            } else {
                value = this.data.direction === "next" ? 1 : -1;
                direction = this.data.direction === "next" ? -this.options.width : this.options.width;
                next = currentSlide + value;
            }
            if (next === -1) {
                next = this.data.total - 1;
            }
            if (next === this.data.total) {
                next = 0;
            }
            this.maskMove(next);
            this._setActive(next);
            slidesControl = $(".slidesjs-control", $element);
            if (number > -1) {
                slidesControl.children(":not(:eq(" + currentSlide + "))").css({
                    display: "none",
                    left: 0,
                    zIndex: 0
                });
            }
            slidesControl.children(":eq(" + next + ")").css({
                display: "block",
                left: value * this.options.width,
                zIndex: 10
            });
            this.options.callback.start(currentSlide + 1);
            if (this.data.touch) {
                prefix = this.data.vendorPrefix;
                transform = prefix + "Transform";
                duration = prefix + "TransitionDuration";
                timing = prefix + "TransitionTimingFunction";
                slidesControl[0].style[transform] = "translateX(" + direction + "px)";
                slidesControl[0].style[duration] = this.options.effect.slide.speed + "ms";
                return slidesControl.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function() {
                    slidesControl[0].style[transform] = "";
                    slidesControl[0].style[duration] = "";
                    slidesControl.children(":eq(" + next + ")").css({
                        left: 0
                    });
                    slidesControl.children(":eq(" + currentSlide + ")").css({
                        display: "none",
                        left: 0,
                        zIndex: 0
                    });
                    $.data(_this, "current", next);
                    $.data(_this, "animating", false);
                    slidesControl.unbind("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd");
                    slidesControl.children(":not(:eq(" + next + "))").css({
                        display: "none",
                        left: 0,
                        zIndex: 0
                    });
                    if (_this.data.touch) {
                        _this._setuptouch();
                    }
                    return _this.options.callback.complete(next + 1);
                });
            } else {
                return slidesControl.stop().animate({
                    left: direction
                }, this.options.effect.slide.speed, (function() {
                    slidesControl.css({
                        left: 0
                    });
                    slidesControl.children(":eq(" + next + ")").css({
                        display: "block",
                        left: 0
                    });
                    return slidesControl.children(":eq(" + currentSlide + ")").css({
                        display: "none",
                        left: 0,
                        zIndex: 0
                    }, $.data(_this, "current", next), $.data(_this, "animating", false), _this.options.callback.complete(next + 1));
                }));
            }
        };
        Plugin.prototype._fade = function(number) {
            var $element, currentSlide, next, slidesControl, value,
                _this = this;
            $element = $(this.element);
            this.data = $.data(this);
            if (!this.data.animating && number !== this.data.current + 1) {
                $.data(this, "animating", true);
                currentSlide = this.data.current;
                if (number) {
                    number = number - 1;
                    value = number > currentSlide ? 1 : -1;
                    next = number;
                } else {
                    value = this.data.direction === "next" ? 1 : -1;
                    next = currentSlide + value;
                }
                if (next === -1) {
                    next = this.data.total - 1;
                }
                if (next === this.data.total) {
                    next = 0;
                }
                this.maskMove(next);
                this._setActive(next);
                slidesControl = $(".slidesjs-control", $element);
                slidesControl.children(":eq(" + next + ")").css({
                    display: "none",
                    left: 0,
                    zIndex: 10
                });
                this.options.callback.start(currentSlide + 1);
                if (this.options.effect.fade.crossfade) {
                    slidesControl.children(":eq(" + this.data.current + ")").stop().fadeOut(this.options.effect.fade.speed);
                    return slidesControl.children(":eq(" + next + ")").stop().fadeIn(this.options.effect.fade.speed, (function() {
                        slidesControl.children(":eq(" + next + ")").css({
                            zIndex: 0
                        });
                        $.data(_this, "animating", false);
                        $.data(_this, "current", next);
                        return _this.options.callback.complete(next + 1);
                    }));
                } else {
                    return slidesControl.children(":eq(" + currentSlide + ")").stop().fadeOut(this.options.effect.fade.speed, (function() {
                        slidesControl.children(":eq(" + next + ")").stop().fadeIn(_this.options.effect.fade.speed, (function() {
                            return slidesControl.children(":eq(" + next + ")").css({
                                zIndex: 10
                            });
                        }));
                        $.data(_this, "animating", false);
                        $.data(_this, "current", next);
                        return _this.options.callback.complete(next + 1);
                    }));
                }
            }
        }
    };
    Plugin.prototype.maskMove = function(number) {
        var $mask = this.options.tabMask.element ?this.options.tabMask.element : $(".thumbnail-image-mask",this.element);
        var $slidesjsThumbnail = this.options.thumbnail.element ?this.options.thumbnail.element : $(".slidesjs-thumbnail-item",this.element);
        var offset;
        var $item = $slidesjsThumbnail.find(".slidesjs-thumbnail-item").eq(number);
        if ($mask.length > 0) {
            if (this.options.tabMask.direction == "left" ) {
                offset = $item.position().left;
            } else {
                offset = $item.position().top;
            }
            if (this.data.vendorPrefix) {
                var prefix = this.data.vendorPrefix;
                var  transform = prefix + "Transform";
                var duration = prefix + "TransitionDuration";
                var timing = prefix + "TransitionTimingFunction";
                $mask[0].style[duration] = this.options.effect.slide.speed + "ms";
                $mask[0].style[timing] = this.options.effect.slide.timing;
                if (this.options.tabMask.direction == "left") {
                    $mask[0].style[transform] = "translateX(" + offset + "px)";
                } else {
                    $mask[0].style[transform] = "translateY(" + offset + "px)";
                }
            } else {
                if (this.options.tabMask.direction == "left") {
                    $mask.animate({left: offset}, 500)
                } else {
                    $mask.animate({top: offset}, 500)
                }
            }
        }
    };
    Plugin.prototype._getVendorPrefix = function() {
        var body, i, style, transition, vendor;
        body = document.body || document.documentElement;
        style = body.style;
        transition = "transition";
        vendor = ["Moz", "Webkit", "Khtml", "O", "ms"];
        transition = transition.charAt(0).toUpperCase() + transition.substr(1);
        i = 0;
        while (i < vendor.length) {
            if (typeof style[vendor[i] + transition] === "string") {
                return vendor[i];
            }
            i++;
        }
        return false;
    };
    return $.fn[pluginName] = function(options) {
        return this.each(function() {
            if (!$.data(this, "plugin_" + pluginName)) {
                return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
            }
        });
    };

},this));;/*!
 * jScrollPane - v2.0.19 - 2013-11-16
 * http://jscrollpane.kelvinluck.com/
 *
 * Copyright (c) 2013 Kelvin Luck
 * Dual licensed under the MIT or GPL licenses.
 */

// Script: jScrollPane - cross browser customisable scrollbars
//
// *Version: 2.0.19, Last updated: 2013-11-16*
//
// Project Home - http://jscrollpane.kelvinluck.com/
// GitHub       - http://github.com/vitch/jScrollPane
// Source       - http://github.com/vitch/jScrollPane/raw/master/script/jquery.jscrollpane.js
// (Minified)   - http://github.com/vitch/jScrollPane/raw/master/script/jquery.jscrollpane.min.js
//
// About: License
//
// Copyright (c) 2013 Kelvin Luck
// Dual licensed under the MIT or GPL Version 2 licenses.
// http://jscrollpane.kelvinluck.com/MIT-LICENSE.txt
// http://jscrollpane.kelvinluck.com/GPL-LICENSE.txt
//
// About: Examples
//
// All examples and demos are available through the jScrollPane example site at:
// http://jscrollpane.kelvinluck.com/
//
// About: Support and Testing
//
// This plugin is tested on the browsers below and has been found to work reliably on them. If you run
// into a problem on one of the supported browsers then please visit the support section on the jScrollPane
// website (http://jscrollpane.kelvinluck.com/) for more information on getting support. You are also
// welcome to fork the project on GitHub if you can contribute a fix for a given issue. 
//
// jQuery Versions - tested in 1.4.2+ - reported to work in 1.3.x
// Browsers Tested - Firefox 3.6.8, Safari 5, Opera 10.6, Chrome 5.0, IE 6, 7, 8
//
// About: Release History
//
// 2.0.19 - (2013-11-16) Changes for more reliable scroll amount with latest mousewheel plugin (thanks @brandonaaron)
// 2.0.18 - (2013-10-23) Fix for issue with gutters and scrollToElement (thanks @Dubiy)
// 2.0.17 - (2013-08-17) Working correctly when box-sizing is set to border-box (thanks @pieht)
// 2.0.16 - (2013-07-30) Resetting left position when scroll is removed. Fixes #189
// 2.0.15 - (2013-07-29) Fixed issue with scrollToElement where the destX and destY are undefined.
// 2.0.14 - (2013-05-01) Updated to most recent mouse wheel plugin (see #106) and related changes for sensible scroll speed
// 2.0.13 - (2013-05-01) Switched to semver compatible version name
// 2.0.0beta12 - (2012-09-27) fix for jQuery 1.8+
// 2.0.0beta11 - (2012-05-14)
// 2.0.0beta10 - (2011-04-17) cleaner required size calculation, improved keyboard support, stickToBottom/Left, other small fixes
// 2.0.0beta9 - (2011-01-31) new API methods, bug fixes and correct keyboard support for FF/OSX
// 2.0.0beta8 - (2011-01-29) touchscreen support, improved keyboard support
// 2.0.0beta7 - (2011-01-23) scroll speed consistent (thanks Aivo Paas)
// 2.0.0beta6 - (2010-12-07) scrollToElement horizontal support
// 2.0.0beta5 - (2010-10-18) jQuery 1.4.3 support, various bug fixes
// 2.0.0beta4 - (2010-09-17) clickOnTrack support, bug fixes
// 2.0.0beta3 - (2010-08-27) Horizontal mousewheel, mwheelIntent, keyboard support, bug fixes
// 2.0.0beta2 - (2010-08-21) Bug fixes
// 2.0.0beta1 - (2010-08-17) Rewrite to follow modern best practices and enable horizontal scrolling, initially hidden
//							 elements and dynamically sized elements.
// 1.x - (2006-12-31 - 2010-07-31) Initial version, hosted at googlecode, deprecated

(function (plugin, window) {
	var factory = function($){
		return plugin($, window);
	}
  if ( typeof define === 'function' && define.amd ) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
  } else if (typeof exports === 'object') {
      // Node/CommonJS style for Browserify
      module.exports = factory;
  } else {
      // Browser globals
      factory(jQuery);
  }
}(function($,window,undefined){

	$.fn.jScrollPane = function(settings)
	{
		// JScrollPane "class" - public methods are available through $('selector').data('jsp')
		function JScrollPane(elem, s)
		{
			var settings, jsp = this, pane, paneWidth, paneHeight, container, contentWidth, contentHeight,
				percentInViewH, percentInViewV, isScrollableV, isScrollableH, verticalDrag, dragMaxY,
				verticalDragPosition, horizontalDrag, dragMaxX, horizontalDragPosition,
				verticalBar, verticalTrack, scrollbarWidth, verticalTrackHeight, verticalDragHeight, arrowUp, arrowDown,
				horizontalBar, horizontalTrack, horizontalTrackWidth, horizontalDragWidth, arrowLeft, arrowRight,
				reinitialiseInterval, originalPadding, originalPaddingTotalWidth, previousContentWidth,
				wasAtTop = true, wasAtLeft = true, wasAtBottom = false, wasAtRight = false,
				originalElement = elem.clone(false, false).empty(),
				mwEvent = $.fn.mwheelIntent ? 'mwheelIntent.jsp' : 'mousewheel.jsp';

			if (elem.css('box-sizing') === 'border-box') {
				originalPadding = 0;
				originalPaddingTotalWidth = 0;
			} else {
				originalPadding = elem.css('paddingTop') + ' ' +
									elem.css('paddingRight') + ' ' +
									elem.css('paddingBottom') + ' ' +
									elem.css('paddingLeft');
				originalPaddingTotalWidth = (parseInt(elem.css('paddingLeft'), 10) || 0) +
											(parseInt(elem.css('paddingRight'), 10) || 0);
			}

			function initialise(s)
			{

				var /*firstChild, lastChild, */isMaintainingPositon, lastContentX, lastContentY,
						hasContainingSpaceChanged, originalScrollTop, originalScrollLeft,
						maintainAtBottom = false, maintainAtRight = false;

				settings = s;

				if (pane === undefined) {
					originalScrollTop = elem.scrollTop();
					originalScrollLeft = elem.scrollLeft();

					elem.css(
						{
							overflow: 'hidden',
							padding: 0
						}
					);
					// TODO: Deal with where width/ height is 0 as it probably means the element is hidden and we should
					// come back to it later and check once it is unhidden...
					paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
					paneHeight = elem.innerHeight();

					elem.width(paneWidth);

					pane = $('<div class="jspPane" />').css('padding', originalPadding).append(elem.children());
					container = $('<div class="jspContainer" />')
						.css({
							'width': paneWidth + 'px',
							'height': paneHeight + 'px'
						}
					).append(pane).appendTo(elem);

					/*
					// Move any margins from the first and last children up to the container so they can still
					// collapse with neighbouring elements as they would before jScrollPane
					firstChild = pane.find(':first-child');
					lastChild = pane.find(':last-child');
					elem.css(
						{
							'margin-top': firstChild.css('margin-top'),
							'margin-bottom': lastChild.css('margin-bottom')
						}
					);
					firstChild.css('margin-top', 0);
					lastChild.css('margin-bottom', 0);
					*/
				} else {
					elem.css('width', '');

					maintainAtBottom = settings.stickToBottom && isCloseToBottom();
					maintainAtRight  = settings.stickToRight  && isCloseToRight();

					hasContainingSpaceChanged = elem.innerWidth() + originalPaddingTotalWidth != paneWidth || elem.outerHeight() != paneHeight;

					if (hasContainingSpaceChanged) {
						paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
						paneHeight = elem.innerHeight();
						container.css({
							width: paneWidth + 'px',
							height: paneHeight + 'px'
						});
					}

					// If nothing changed since last check...
					if (!hasContainingSpaceChanged && previousContentWidth == contentWidth && pane.outerHeight() == contentHeight) {
						elem.width(paneWidth);
						return;
					}
					previousContentWidth = contentWidth;

					pane.css('width', '');
					elem.width(paneWidth);

					container.find('>.jspVerticalBar,>.jspHorizontalBar').remove().end();
				}

				pane.css('overflow', 'auto');
				if (s.contentWidth) {
					contentWidth = s.contentWidth;
				} else {
					contentWidth = pane[0].scrollWidth;
				}
				contentHeight = pane[0].scrollHeight;
				pane.css('overflow', '');

				percentInViewH = contentWidth / paneWidth;
				percentInViewV = contentHeight / paneHeight;
				isScrollableV = percentInViewV > 1;

				isScrollableH = percentInViewH > 1;

				//console.log(paneWidth, paneHeight, contentWidth, contentHeight, percentInViewH, percentInViewV, isScrollableH, isScrollableV);

				if (!(isScrollableH || isScrollableV)) {
					elem.removeClass('jspScrollable');
					pane.css({
            top: 0,
            left: 0,
						width: container.width() - originalPaddingTotalWidth
					});
					removeMousewheel();
					removeFocusHandler();
					removeKeyboardNav();
					removeClickOnTrack();
				} else {
					elem.addClass('jspScrollable');

					isMaintainingPositon = settings.maintainPosition && (verticalDragPosition || horizontalDragPosition);
					if (isMaintainingPositon) {
						lastContentX = contentPositionX();
						lastContentY = contentPositionY();
					}

					initialiseVerticalScroll();
					initialiseHorizontalScroll();
					resizeScrollbars();

					if (isMaintainingPositon) {
						scrollToX(maintainAtRight  ? (contentWidth  - paneWidth ) : lastContentX, false);
						scrollToY(maintainAtBottom ? (contentHeight - paneHeight) : lastContentY, false);
					}

					initFocusHandler();
					initMousewheel();
					initTouch();

					if (settings.enableKeyboardNavigation) {
						initKeyboardNav();
					}
					if (settings.clickOnTrack) {
						initClickOnTrack();
					}

					observeHash();
					if (settings.hijackInternalLinks) {
						hijackInternalLinks();
					}
				}

				if (settings.autoReinitialise && !reinitialiseInterval) {
					reinitialiseInterval = setInterval(
						function()
						{
							initialise(settings);
						},
						settings.autoReinitialiseDelay
					);
				} else if (!settings.autoReinitialise && reinitialiseInterval) {
					clearInterval(reinitialiseInterval);
				}

				originalScrollTop && elem.scrollTop(0) && scrollToY(originalScrollTop, false);
				originalScrollLeft && elem.scrollLeft(0) && scrollToX(originalScrollLeft, false);

				elem.trigger('jsp-initialised', [isScrollableH || isScrollableV]);
			}

			function initialiseVerticalScroll()
			{
				if (isScrollableV) {

					container.append(
						$('<div class="jspVerticalBar" />').append(
							$('<div class="jspCap jspCapTop" />'),
							$('<div class="jspTrack" />').append(
								$('<div class="jspDrag" />').append(
									$('<div class="jspDragTop" />'),
									$('<div class="jspDragBottom" />')
								)
							),
							$('<div class="jspCap jspCapBottom" />')
						)
					);

					verticalBar = container.find('>.jspVerticalBar');
					verticalTrack = verticalBar.find('>.jspTrack');
					verticalDrag = verticalTrack.find('>.jspDrag');

					if (settings.showArrows) {
						arrowUp = $('<a class="jspArrow jspArrowUp" />').bind(
							'mousedown.jsp', getArrowScroll(0, -1)
						).bind('click.jsp', nil);
						arrowDown = $('<a class="jspArrow jspArrowDown" />').bind(
							'mousedown.jsp', getArrowScroll(0, 1)
						).bind('click.jsp', nil);
						if (settings.arrowScrollOnHover) {
							arrowUp.bind('mouseover.jsp', getArrowScroll(0, -1, arrowUp));
							arrowDown.bind('mouseover.jsp', getArrowScroll(0, 1, arrowDown));
						}

						appendArrows(verticalTrack, settings.verticalArrowPositions, arrowUp, arrowDown);
					}

					verticalTrackHeight = paneHeight;
					container.find('>.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow').each(
						function()
						{
							verticalTrackHeight -= $(this).outerHeight();
						}
					);


					verticalDrag.hover(
						function()
						{
							verticalDrag.addClass('jspHover');
						},
						function()
						{
							verticalDrag.removeClass('jspHover');
						}
					).bind(
						'mousedown.jsp',
						function(e)
						{
							// Stop IE from allowing text selection
							$('html').bind('dragstart.jsp selectstart.jsp', nil);

							verticalDrag.addClass('jspActive');

							var startY = e.pageY - verticalDrag.position().top;

							$('html').bind(
								'mousemove.jsp',
								function(e)
								{
									positionDragY(e.pageY - startY, false);
								}
							).bind('mouseup.jsp mouseleave.jsp', cancelDrag);
							return false;
						}
					);
					sizeVerticalScrollbar();
				}
			}

			function sizeVerticalScrollbar()
			{
				verticalTrack.height(verticalTrackHeight + 'px');
				verticalDragPosition = 0;
				scrollbarWidth = settings.verticalGutter + verticalTrack.outerWidth();

				// Make the pane thinner to allow for the vertical scrollbar
				pane.width(paneWidth - scrollbarWidth - originalPaddingTotalWidth);

				// Add margin to the left of the pane if scrollbars are on that side (to position
				// the scrollbar on the left or right set it's left or right property in CSS)
				try {
					if (verticalBar.position().left === 0) {
						pane.css('margin-left', scrollbarWidth + 'px');
					}
				} catch (err) {
				}
			}

			function initialiseHorizontalScroll()
			{
				if (isScrollableH) {

					container.append(
						$('<div class="jspHorizontalBar" />').append(
							$('<div class="jspCap jspCapLeft" />'),
							$('<div class="jspTrack" />').append(
								$('<div class="jspDrag" />').append(
									$('<div class="jspDragLeft" />'),
									$('<div class="jspDragRight" />')
								)
							),
							$('<div class="jspCap jspCapRight" />')
						)
					);

					horizontalBar = container.find('>.jspHorizontalBar');
					horizontalTrack = horizontalBar.find('>.jspTrack');
					horizontalDrag = horizontalTrack.find('>.jspDrag');

					if (settings.showArrows) {
						arrowLeft = $('<a class="jspArrow jspArrowLeft" />').bind(
							'mousedown.jsp', getArrowScroll(-1, 0)
						).bind('click.jsp', nil);
						arrowRight = $('<a class="jspArrow jspArrowRight" />').bind(
							'mousedown.jsp', getArrowScroll(1, 0)
						).bind('click.jsp', nil);
						if (settings.arrowScrollOnHover) {
							arrowLeft.bind('mouseover.jsp', getArrowScroll(-1, 0, arrowLeft));
							arrowRight.bind('mouseover.jsp', getArrowScroll(1, 0, arrowRight));
						}
						appendArrows(horizontalTrack, settings.horizontalArrowPositions, arrowLeft, arrowRight);
					}

					horizontalDrag.hover(
						function()
						{
							horizontalDrag.addClass('jspHover');
						},
						function()
						{
							horizontalDrag.removeClass('jspHover');
						}
					).bind(
						'mousedown.jsp',
						function(e)
						{
							// Stop IE from allowing text selection
							$('html').bind('dragstart.jsp selectstart.jsp', nil);

							horizontalDrag.addClass('jspActive');

							var startX = e.pageX - horizontalDrag.position().left;

							$('html').bind(
								'mousemove.jsp',
								function(e)
								{
									positionDragX(e.pageX - startX, false);
								}
							).bind('mouseup.jsp mouseleave.jsp', cancelDrag);
							return false;
						}
					);
					horizontalTrackWidth = container.innerWidth();
					sizeHorizontalScrollbar();
				}
			}

			function sizeHorizontalScrollbar()
			{
				container.find('>.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow').each(
					function()
					{
						horizontalTrackWidth -= $(this).outerWidth();
					}
				);

				horizontalTrack.width(horizontalTrackWidth + 'px');
				horizontalDragPosition = 0;
			}

			function resizeScrollbars()
			{
				if (isScrollableH && isScrollableV) {
					var horizontalTrackHeight = horizontalTrack.outerHeight(),
						verticalTrackWidth = verticalTrack.outerWidth();
					verticalTrackHeight -= horizontalTrackHeight;
					$(horizontalBar).find('>.jspCap:visible,>.jspArrow').each(
						function()
						{
							horizontalTrackWidth += $(this).outerWidth();
						}
					);
					horizontalTrackWidth -= verticalTrackWidth;
					paneHeight -= verticalTrackWidth;
					paneWidth -= horizontalTrackHeight;
					horizontalTrack.parent().append(
						$('<div class="jspCorner" />').css('width', horizontalTrackHeight + 'px')
					);
					sizeVerticalScrollbar();
					sizeHorizontalScrollbar();
				}
				// reflow content
				if (isScrollableH) {
					pane.width((container.outerWidth() - originalPaddingTotalWidth) + 'px');
				}
				contentHeight = pane.outerHeight();
				percentInViewV = contentHeight / paneHeight;

				if (isScrollableH) {
					horizontalDragWidth = Math.ceil(1 / percentInViewH * horizontalTrackWidth);
					if (horizontalDragWidth > settings.horizontalDragMaxWidth) {
						horizontalDragWidth = settings.horizontalDragMaxWidth;
					} else if (horizontalDragWidth < settings.horizontalDragMinWidth) {
						horizontalDragWidth = settings.horizontalDragMinWidth;
					}
					horizontalDrag.width(horizontalDragWidth + 'px');
					dragMaxX = horizontalTrackWidth - horizontalDragWidth;
					_positionDragX(horizontalDragPosition); // To update the state for the arrow buttons
				}
				if (isScrollableV) {
					verticalDragHeight = Math.ceil(1 / percentInViewV * verticalTrackHeight);
					if (verticalDragHeight > settings.verticalDragMaxHeight) {
						verticalDragHeight = settings.verticalDragMaxHeight;
					} else if (verticalDragHeight < settings.verticalDragMinHeight) {
						verticalDragHeight = settings.verticalDragMinHeight;
					}
					verticalDrag.height(verticalDragHeight + 'px');
					dragMaxY = verticalTrackHeight - verticalDragHeight;
					_positionDragY(verticalDragPosition); // To update the state for the arrow buttons
				}
			}

			function appendArrows(ele, p, a1, a2)
			{
				var p1 = "before", p2 = "after", aTemp;

				// Sniff for mac... Is there a better way to determine whether the arrows would naturally appear
				// at the top or the bottom of the bar?
				if (p == "os") {
					p = /Mac/.test(navigator.platform) ? "after" : "split";
				}
				if (p == p1) {
					p2 = p;
				} else if (p == p2) {
					p1 = p;
					aTemp = a1;
					a1 = a2;
					a2 = aTemp;
				}

				ele[p1](a1)[p2](a2);
			}

			function getArrowScroll(dirX, dirY, ele)
			{
				return function()
				{
					arrowScroll(dirX, dirY, this, ele);
					this.blur();
					return false;
				};
			}

			function arrowScroll(dirX, dirY, arrow, ele)
			{
				arrow = $(arrow).addClass('jspActive');

				var eve,
					scrollTimeout,
					isFirst = true,
					doScroll = function()
					{
						if (dirX !== 0) {
							jsp.scrollByX(dirX * settings.arrowButtonSpeed);
						}
						if (dirY !== 0) {
							jsp.scrollByY(dirY * settings.arrowButtonSpeed);
						}
						scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.arrowRepeatFreq);
						isFirst = false;
					};

				doScroll();

				eve = ele ? 'mouseout.jsp' : 'mouseup.jsp';
				ele = ele || $('html');
				ele.bind(
					eve,
					function()
					{
						arrow.removeClass('jspActive');
						scrollTimeout && clearTimeout(scrollTimeout);
						scrollTimeout = null;
						ele.unbind(eve);
					}
				);
			}

			function initClickOnTrack()
			{
				removeClickOnTrack();
				if (isScrollableV) {
					verticalTrack.bind(
						'mousedown.jsp',
						function(e)
						{
							if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
								var clickedTrack = $(this),
									offset = clickedTrack.offset(),
									direction = e.pageY - offset.top - verticalDragPosition,
									scrollTimeout,
									isFirst = true,
									doScroll = function()
									{
										var offset = clickedTrack.offset(),
											pos = e.pageY - offset.top - verticalDragHeight / 2,
											contentDragY = paneHeight * settings.scrollPagePercent,
											dragY = dragMaxY * contentDragY / (contentHeight - paneHeight);
										if (direction < 0) {
											if (verticalDragPosition - dragY > pos) {
												jsp.scrollByY(-contentDragY);
											} else {
												positionDragY(pos);
											}
										} else if (direction > 0) {
											if (verticalDragPosition + dragY < pos) {
												jsp.scrollByY(contentDragY);
											} else {
												positionDragY(pos);
											}
										} else {
											cancelClick();
											return;
										}
										scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
										isFirst = false;
									},
									cancelClick = function()
									{
										scrollTimeout && clearTimeout(scrollTimeout);
										scrollTimeout = null;
										$(document).unbind('mouseup.jsp', cancelClick);
									};
								doScroll();
								$(document).bind('mouseup.jsp', cancelClick);
								return false;
							}
						}
					);
				}

				if (isScrollableH) {
					horizontalTrack.bind(
						'mousedown.jsp',
						function(e)
						{
							if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
								var clickedTrack = $(this),
									offset = clickedTrack.offset(),
									direction = e.pageX - offset.left - horizontalDragPosition,
									scrollTimeout,
									isFirst = true,
									doScroll = function()
									{
										var offset = clickedTrack.offset(),
											pos = e.pageX - offset.left - horizontalDragWidth / 2,
											contentDragX = paneWidth * settings.scrollPagePercent,
											dragX = dragMaxX * contentDragX / (contentWidth - paneWidth);
										if (direction < 0) {
											if (horizontalDragPosition - dragX > pos) {
												jsp.scrollByX(-contentDragX);
											} else {
												positionDragX(pos);
											}
										} else if (direction > 0) {
											if (horizontalDragPosition + dragX < pos) {
												jsp.scrollByX(contentDragX);
											} else {
												positionDragX(pos);
											}
										} else {
											cancelClick();
											return;
										}
										scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
										isFirst = false;
									},
									cancelClick = function()
									{
										scrollTimeout && clearTimeout(scrollTimeout);
										scrollTimeout = null;
										$(document).unbind('mouseup.jsp', cancelClick);
									};
								doScroll();
								$(document).bind('mouseup.jsp', cancelClick);
								return false;
							}
						}
					);
				}
			}

			function removeClickOnTrack()
			{
				if (horizontalTrack) {
					horizontalTrack.unbind('mousedown.jsp');
				}
				if (verticalTrack) {
					verticalTrack.unbind('mousedown.jsp');
				}
			}

			function cancelDrag()
			{
				$('html').unbind('dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp');

				if (verticalDrag) {
					verticalDrag.removeClass('jspActive');
				}
				if (horizontalDrag) {
					horizontalDrag.removeClass('jspActive');
				}
			}

			function positionDragY(destY, animate,callBack)
			{
				if (!isScrollableV) {
                    if(callBack){
                        callBack();
                    }
					return;
				}
				if (destY < 0) {
					destY = 0;
				} else if (destY > dragMaxY) {
					destY = dragMaxY;
				}

				// can't just check if(animate) because false is a valid value that could be passed in...
				if (animate === undefined) {
					animate = settings.animateScroll;
				}
				if (animate) {
					jsp.animate(verticalDrag, 'top', destY,	_positionDragY,callBack);
				} else {
					verticalDrag.css('top', destY);
					_positionDragY(destY);
				}

			}

			function _positionDragY(destY)
			{
				if (destY === undefined) {
					destY = verticalDrag.position().top;
				}

				container.scrollTop(0);
				verticalDragPosition = destY;

				var isAtTop = verticalDragPosition === 0,
					isAtBottom = verticalDragPosition == dragMaxY,
					percentScrolled = destY/ dragMaxY,
					destTop = -percentScrolled * (contentHeight - paneHeight);

				if (wasAtTop != isAtTop || wasAtBottom != isAtBottom) {
					wasAtTop = isAtTop;
					wasAtBottom = isAtBottom;
					elem.trigger('jsp-arrow-change', [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
				}

				updateVerticalArrows(isAtTop, isAtBottom);
				pane.css('top', destTop);
				elem.trigger('jsp-scroll-y', [-destTop, isAtTop, isAtBottom]).trigger('scroll');
			}

			function positionDragX(destX, animate,callBack)
			{
				if (!isScrollableH) {
                    if(callBack){
                        callBack();
                    }
					return;
				}
				if (destX < 0) {
					destX = 0;
				} else if (destX > dragMaxX) {
					destX = dragMaxX;
				}

				if (animate === undefined) {
					animate = settings.animateScroll;
				}
				if (animate) {
					jsp.animate(horizontalDrag, 'left', destX,	_positionDragX,callBack);
				} else {
					horizontalDrag.css('left', destX);
					_positionDragX(destX);
				}
			}


			function _positionDragX(destX)
			{
				if (destX === undefined) {
					destX = horizontalDrag.position().left;
				}

				container.scrollTop(0);
				horizontalDragPosition = destX;

				var isAtLeft = horizontalDragPosition === 0,
					isAtRight = horizontalDragPosition == dragMaxX,
					percentScrolled = destX / dragMaxX,
					destLeft = -percentScrolled * (contentWidth - paneWidth);

				if (wasAtLeft != isAtLeft || wasAtRight != isAtRight) {
					wasAtLeft = isAtLeft;
					wasAtRight = isAtRight;
					elem.trigger('jsp-arrow-change', [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
				}

				updateHorizontalArrows(isAtLeft, isAtRight);
				pane.css('left', destLeft);
				elem.trigger('jsp-scroll-x', [-destLeft, isAtLeft, isAtRight]).trigger('scroll');
			}

			function updateVerticalArrows(isAtTop, isAtBottom)
			{
				if (settings.showArrows) {
					arrowUp[isAtTop ? 'addClass' : 'removeClass']('jspDisabled');
					arrowDown[isAtBottom ? 'addClass' : 'removeClass']('jspDisabled');
				}
			}

			function updateHorizontalArrows(isAtLeft, isAtRight)
			{
				if (settings.showArrows) {
					arrowLeft[isAtLeft ? 'addClass' : 'removeClass']('jspDisabled');
					arrowRight[isAtRight ? 'addClass' : 'removeClass']('jspDisabled');
				}
			}

			function scrollToY(destY, animate,callBack)
			{
				var percentScrolled = destY / (contentHeight - paneHeight);
				positionDragY(percentScrolled * dragMaxY, animate,callBack);
			}

			function scrollToX(destX, animate,callback)
			{
				var percentScrolled = destX / (contentWidth - paneWidth);
				positionDragX(percentScrolled * dragMaxX, animate,callback);
			}

			function scrollToElement(ele, stickToTop, animate)
			{
				var e, eleHeight, eleWidth, eleTop = 0, eleLeft = 0, viewportTop, viewportLeft, maxVisibleEleTop, maxVisibleEleLeft, destY, destX;

				// Legal hash values aren't necessarily legal jQuery selectors so we need to catch any
				// errors from the lookup...
				try {
					e = $(ele);
				} catch (err) {
					return;
				}
				eleHeight = e.outerHeight();
				eleWidth= e.outerWidth();

				container.scrollTop(0);
				container.scrollLeft(0);

				// loop through parents adding the offset top of any elements that are relatively positioned between
				// the focused element and the jspPane so we can get the true distance from the top
				// of the focused element to the top of the scrollpane...
				while (!e.is('.jspPane')) {
					eleTop += e.position().top;
					eleLeft += e.position().left;
					e = e.offsetParent();
					if (/^body|html$/i.test(e[0].nodeName)) {
						// we ended up too high in the document structure. Quit!
						return;
					}
				}

				viewportTop = contentPositionY();
				maxVisibleEleTop = viewportTop + paneHeight;
				if (eleTop < viewportTop || stickToTop) { // element is above viewport
					destY = eleTop - settings.horizontalGutter;
				} else if (eleTop + eleHeight > maxVisibleEleTop) { // element is below viewport
					destY = eleTop - paneHeight + eleHeight + settings.horizontalGutter;
				}
				if (!isNaN(destY)) {
					scrollToY(destY, animate);
				}

				viewportLeft = contentPositionX();
	            maxVisibleEleLeft = viewportLeft + paneWidth;
	            if (eleLeft < viewportLeft || stickToTop) { // element is to the left of viewport
	                destX = eleLeft - settings.horizontalGutter;
	            } else if (eleLeft + eleWidth > maxVisibleEleLeft) { // element is to the right viewport
	                destX = eleLeft - paneWidth + eleWidth + settings.horizontalGutter;
	            }
	            if (!isNaN(destX)) {
	                scrollToX(destX, animate);
	            }

			}

			function contentPositionX()
			{
				return -pane.position().left;
			}

			function contentPositionY()
			{
				return -pane.position().top;
			}

			function isCloseToBottom()
			{
				var scrollableHeight = contentHeight - paneHeight;
				return (scrollableHeight > 20) && (scrollableHeight - contentPositionY() < 10);
			}

			function isCloseToRight()
			{
				var scrollableWidth = contentWidth - paneWidth;
				return (scrollableWidth > 20) && (scrollableWidth - contentPositionX() < 10);
			}

			function initMousewheel()
			{
				container.unbind(mwEvent).bind(
					mwEvent,
					function (event, delta, deltaX, deltaY) {
						var dX = horizontalDragPosition, dY = verticalDragPosition, factor = event.deltaFactor || settings.mouseWheelSpeed;
						jsp.scrollBy(deltaX * factor, -deltaY * factor, false);
						// return true if there was no movement so rest of screen can scroll
						return dX == horizontalDragPosition && dY == verticalDragPosition;
					}
				);
			}

			function removeMousewheel()
			{
				container.unbind(mwEvent);
			}

			function nil()
			{
				return false;
			}

			function initFocusHandler()
			{
				pane.find(':input,a').unbind('focus.jsp').bind(
					'focus.jsp',
					function(e)
					{
						scrollToElement(e.target, false);
					}
				);
			}

			function removeFocusHandler()
			{
				pane.find(':input,a').unbind('focus.jsp');
			}

			function initKeyboardNav()
			{
				var keyDown, elementHasScrolled, validParents = [];
				isScrollableH && validParents.push(horizontalBar[0]);
				isScrollableV && validParents.push(verticalBar[0]);

				// IE also focuses elements that don't have tabindex set.
				pane.focus(
					function()
					{
						elem.focus();
					}
				);

				elem.attr('tabindex', 0)
					.unbind('keydown.jsp keypress.jsp')
					.bind(
						'keydown.jsp',
						function(e)
						{
							if (e.target !== this && !(validParents.length && $(e.target).closest(validParents).length)){
								return;
							}
							var dX = horizontalDragPosition, dY = verticalDragPosition;
							switch(e.keyCode) {
								case 40: // down
								case 38: // up
								case 34: // page down
								case 32: // space
								case 33: // page up
								case 39: // right
								case 37: // left
									keyDown = e.keyCode;
									keyDownHandler();
									break;
								case 35: // end
									scrollToY(contentHeight - paneHeight);
									keyDown = null;
									break;
								case 36: // home
									scrollToY(0);
									keyDown = null;
									break;
							}

							elementHasScrolled = e.keyCode == keyDown && dX != horizontalDragPosition || dY != verticalDragPosition;
							return !elementHasScrolled;
						}
					).bind(
						'keypress.jsp', // For FF/ OSX so that we can cancel the repeat key presses if the JSP scrolls...
						function(e)
						{
							if (e.keyCode == keyDown) {
								keyDownHandler();
							}
							return !elementHasScrolled;
						}
					);

				if (settings.hideFocus) {
					elem.css('outline', 'none');
					if ('hideFocus' in container[0]){
						elem.attr('hideFocus', true);
					}
				} else {
					elem.css('outline', '');
					if ('hideFocus' in container[0]){
						elem.attr('hideFocus', false);
					}
				}

				function keyDownHandler()
				{
					var dX = horizontalDragPosition, dY = verticalDragPosition;
					switch(keyDown) {
						case 40: // down
							jsp.scrollByY(settings.keyboardSpeed, false);
							break;
						case 38: // up
							jsp.scrollByY(-settings.keyboardSpeed, false);
							break;
						case 34: // page down
						case 32: // space
							jsp.scrollByY(paneHeight * settings.scrollPagePercent, false);
							break;
						case 33: // page up
							jsp.scrollByY(-paneHeight * settings.scrollPagePercent, false);
							break;
						case 39: // right
							jsp.scrollByX(settings.keyboardSpeed, false);
							break;
						case 37: // left
							jsp.scrollByX(-settings.keyboardSpeed, false);
							break;
					}

					elementHasScrolled = dX != horizontalDragPosition || dY != verticalDragPosition;
					return elementHasScrolled;
				}
			}

			function removeKeyboardNav()
			{
				elem.attr('tabindex', '-1')
					.removeAttr('tabindex')
					.unbind('keydown.jsp keypress.jsp');
			}

			function observeHash()
			{
				if (location.hash && location.hash.length > 1) {
					var e,
						retryInt,
						hash = escape(location.hash.substr(1)) // hash must be escaped to prevent XSS
						;
					try {
						e = $('#' + hash + ', a[name="' + hash + '"]');
					} catch (err) {
						return;
					}

					if (e.length && pane.find(hash)) {
						// nasty workaround but it appears to take a little while before the hash has done its thing
						// to the rendered page so we just wait until the container's scrollTop has been messed up.
						if (container.scrollTop() === 0) {
							retryInt = setInterval(
								function()
								{
									if (container.scrollTop() > 0) {
										scrollToElement(e, true);
										$(document).scrollTop(container.position().top);
										clearInterval(retryInt);
									}
								},
								50
							);
						} else {
							scrollToElement(e, true);
							$(document).scrollTop(container.position().top);
						}
					}
				}
			}

			function hijackInternalLinks()
			{
				// only register the link handler once
				if ($(document.body).data('jspHijack')) {
					return;
				}

				// remember that the handler was bound
				$(document.body).data('jspHijack', true);

				// use live handler to also capture newly created links
				$(document.body).delegate('a[href*=#]', 'click', function(event) {
					// does the link point to the same page?
					// this also takes care of cases with a <base>-Tag or Links not starting with the hash #
					// e.g. <a href="index.html#test"> when the current url already is index.html
					var href = this.href.substr(0, this.href.indexOf('#')),
						locationHref = location.href,
						hash,
						element,
						container,
						jsp,
						scrollTop,
						elementTop;
					if (location.href.indexOf('#') !== -1) {
						locationHref = location.href.substr(0, location.href.indexOf('#'));
					}
					if (href !== locationHref) {
						// the link points to another page
						return;
					}

					// check if jScrollPane should handle this click event
					hash = escape(this.href.substr(this.href.indexOf('#') + 1));

					// find the element on the page
					element;
					try {
						element = $('#' + hash + ', a[name="' + hash + '"]');
					} catch (e) {
						// hash is not a valid jQuery identifier
						return;
					}

					if (!element.length) {
						// this link does not point to an element on this page
						return;
					}

					container = element.closest('.jspScrollable');
					jsp = container.data('jsp');

					// jsp might be another jsp instance than the one, that bound this event
					// remember: this event is only bound once for all instances.
					jsp.scrollToElement(element, true);

					if (container[0].scrollIntoView) {
						// also scroll to the top of the container (if it is not visible)
						scrollTop = $(window).scrollTop();
						elementTop = element.offset().top;
						if (elementTop < scrollTop || elementTop > scrollTop + $(window).height()) {
							container[0].scrollIntoView();
						}
					}

					// jsp handled this event, prevent the browser default (scrolling :P)
					event.preventDefault();
				});
			}

			// Init touch on iPad, iPhone, iPod, Android
			function initTouch()
			{
				var startX,
					startY,
					touchStartX,
					touchStartY,
					moved,
					moving = false;

				container.unbind('touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick').bind(
					'touchstart.jsp',
					function(e)
					{
						var touch = e.originalEvent.touches[0];
						startX = contentPositionX();
						startY = contentPositionY();
						touchStartX = touch.pageX;
						touchStartY = touch.pageY;
						moved = false;
						moving = true;
					}
				).bind(
					'touchmove.jsp',
					function(ev)
					{
						if(!moving) {
							return;
						}

						var touchPos = ev.originalEvent.touches[0],
							dX = horizontalDragPosition, dY = verticalDragPosition;

						jsp.scrollTo(startX + touchStartX - touchPos.pageX, startY + touchStartY - touchPos.pageY);

						moved = moved || Math.abs(touchStartX - touchPos.pageX) > 5 || Math.abs(touchStartY - touchPos.pageY) > 5;

						// return true if there was no movement so rest of screen can scroll
						return dX == horizontalDragPosition && dY == verticalDragPosition;
					}
				).bind(
					'touchend.jsp',
					function(e)
					{
						moving = false;
						/*if(moved) {
							return false;
						}*/
					}
				).bind(
					'click.jsp-touchclick',
					function(e)
					{
						if(moved) {
							moved = false;
							return false;
						}
					}
				);
			}

			function destroy(){
				var currentY = contentPositionY(),
					currentX = contentPositionX();
				elem.removeClass('jspScrollable').unbind('.jsp');
				elem.replaceWith(originalElement.append(pane.children()));
				originalElement.scrollTop(currentY);
				originalElement.scrollLeft(currentX);

				// clear reinitialize timer if active
				if (reinitialiseInterval) {
					clearInterval(reinitialiseInterval);
				}
			}

			// Public API
			$.extend(
				jsp,
				{
					// Reinitialises the scroll pane (if it's internal dimensions have changed since the last time it
					// was initialised). The settings object which is passed in will override any settings from the
					// previous time it was initialised - if you don't pass any settings then the ones from the previous
					// initialisation will be used.
					reinitialise: function(s)
					{
						s = $.extend({}, settings, s);
						initialise(s);
					},
					// Scrolls the specified element (a jQuery object, DOM node or jQuery selector string) into view so
					// that it can be seen within the viewport. If stickToTop is true then the element will appear at
					// the top of the viewport, if it is false then the viewport will scroll as little as possible to
					// show the element. You can also specify if you want animation to occur. If you don't provide this
					// argument then the animateScroll value from the settings object is used instead.
					scrollToElement: function(ele, stickToTop, animate)
					{
						scrollToElement(ele, stickToTop, animate);
					},
					// Scrolls the pane so that the specified co-ordinates within the content are at the top left
					// of the viewport. animate is optional and if not passed then the value of animateScroll from
					// the settings object this jScrollPane was initialised with is used.
					scrollTo: function(destX, destY, animate)
					{
						scrollToX(destX, animate);
						scrollToY(destY, animate);
					},
					// Scrolls the pane so that the specified co-ordinate within the content is at the left of the
					// viewport. animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					scrollToX: function(destX, animate,callback)
					{
						scrollToX(destX, animate,callback);
					},
					// Scrolls the pane so that the specified co-ordinate within the content is at the top of the
					// viewport. animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					scrollToY: function(destY, animate)
					{
						scrollToY(destY, animate);
					},
					// Scrolls the pane to the specified percentage of its maximum horizontal scroll position. animate
					// is optional and if not passed then the value of animateScroll from the settings object this
					// jScrollPane was initialised with is used.
					scrollToPercentX: function(destPercentX, animate)
					{
						scrollToX(destPercentX * (contentWidth - paneWidth), animate);
					},
					// Scrolls the pane to the specified percentage of its maximum vertical scroll position. animate
					// is optional and if not passed then the value of animateScroll from the settings object this
					// jScrollPane was initialised with is used.
					scrollToPercentY: function(destPercentY, animate)
					{
						scrollToY(destPercentY * (contentHeight - paneHeight), animate);
					},
					// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
					// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
					scrollBy: function(deltaX, deltaY, animate,callBack)
					{
						jsp.scrollByX(deltaX, animate);
						jsp.scrollByY(deltaY, animate);
					},
					// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
					// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
					scrollByX: function(deltaX, animate,callBack)
					{
						var destX = contentPositionX() + Math[deltaX<0 ? 'floor' : 'ceil'](deltaX),
							percentScrolled = destX / (contentWidth - paneWidth);
						positionDragX(percentScrolled * dragMaxX, animate,callBack);
					},
					// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
					// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
					scrollByY: function(deltaY, animate,callBack)
					{
						var destY = contentPositionY() + Math[deltaY<0 ? 'floor' : 'ceil'](deltaY),
							percentScrolled = destY / (contentHeight - paneHeight);
						positionDragY(percentScrolled * dragMaxY, animate,callBack);
					},
					// Positions the horizontal drag at the specified x position (and updates the viewport to reflect
					// this). animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					positionDragX: function(x, animate)
					{
						positionDragX(x, animate);
					},
					// Positions the vertical drag at the specified y position (and updates the viewport to reflect
					// this). animate is optional and if not passed then the value of animateScroll from the settings
					// object this jScrollPane was initialised with is used.
					positionDragY: function(y, animate)
					{
						positionDragY(y, animate);
					},
					// This method is called when jScrollPane is trying to animate to a new position. You can override
					// it if you want to provide advanced animation functionality. It is passed the following arguments:
					//  * ele          - the element whose position is being animated
					//  * prop         - the property that is being animated
					//  * value        - the value it's being animated to
					//  * stepCallback - a function that you must execute each time you update the value of the property
					// You can use the default implementation (below) as a starting point for your own implementation.
					animate: function(ele, prop, value, stepCallback,callBack)
					{
						var params = {};
						params[prop] = value;
						ele.animate(
							params,
							{
								'duration'	: settings.animateDuration,
								'easing'	: settings.animateEase,
								'queue'		: false,
								'step'		: stepCallback,
                                'complete':callBack
							}
						);
					},
					// Returns the current x position of the viewport with regards to the content pane.
					getContentPositionX: function()
					{
						return contentPositionX();
					},
					// Returns the current y position of the viewport with regards to the content pane.
					getContentPositionY: function()
					{
						return contentPositionY();
					},
					// Returns the width of the content within the scroll pane.
					getContentWidth: function()
					{
						return contentWidth;
					},
					// Returns the height of the content within the scroll pane.
					getContentHeight: function()
					{
						return contentHeight;
					},
					// Returns the horizontal position of the viewport within the pane content.
					getPercentScrolledX: function()
					{
						return contentPositionX() / (contentWidth - paneWidth);
					},
					// Returns the vertical position of the viewport within the pane content.
					getPercentScrolledY: function()
					{
						return contentPositionY() / (contentHeight - paneHeight);
					},
					// Returns whether or not this scrollpane has a horizontal scrollbar.
					getIsScrollableH: function()
					{
						return isScrollableH;
					},
					// Returns whether or not this scrollpane has a vertical scrollbar.
					getIsScrollableV: function()
					{
						return isScrollableV;
					},
					// Gets a reference to the content pane. It is important that you use this method if you want to
					// edit the content of your jScrollPane as if you access the element directly then you may have some
					// problems (as your original element has had additional elements for the scrollbars etc added into
					// it).
					getContentPane: function()
					{
						return pane;
					},
					// Scrolls this jScrollPane down as far as it can currently scroll. If animate isn't passed then the
					// animateScroll value from settings is used instead.
					scrollToBottom: function(animate)
					{
						positionDragY(dragMaxY, animate);
					},
					// Hijacks the links on the page which link to content inside the scrollpane. If you have changed
					// the content of your page (e.g. via AJAX) and want to make sure any new anchor links to the
					// contents of your scroll pane will work then call this function.
					hijackInternalLinks: $.noop,
					// Removes the jScrollPane and returns the page to the state it was in before jScrollPane was
					// initialised.
					destroy: function()
					{
							destroy();
					}
				}
			);

			initialise(s);
		}

		// Pluginifying code...
		settings = $.extend({}, $.fn.jScrollPane.defaults, settings);

		// Apply default speed
		$.each(['arrowButtonSpeed', 'trackClickSpeed', 'keyboardSpeed'], function() {
			settings[this] = settings[this] || settings.speed;
		});

		return this.each(
			function()
			{
				var elem = $(this), jspApi = elem.data('jsp');
				if (jspApi) {
					jspApi.reinitialise(settings);
				} else {
					$("script",elem).filter('[type="text/javascript"],:not([type])').remove();
					jspApi = new JScrollPane(elem, settings);
					elem.data('jsp', jspApi);
				}
			}
		);
	};

	$.fn.jScrollPane.defaults = {
		showArrows					: false,
		maintainPosition			: true,
		stickToBottom				: false,
		stickToRight				: false,
		clickOnTrack				: true,
		autoReinitialise			: false,
		autoReinitialiseDelay		: 500,
		verticalDragMinHeight		: 0,
		verticalDragMaxHeight		: 99999,
		horizontalDragMinWidth		: 0,
		horizontalDragMaxWidth		: 99999,
		contentWidth				: undefined,
		animateScroll				: false,
		animateDuration				: 300,
		animateEase					: 'linear',
		hijackInternalLinks			: false,
		verticalGutter				: 4,
		horizontalGutter			: 4,
		mouseWheelSpeed				: 3,
		arrowButtonSpeed			: 0,
		arrowRepeatFreq				: 50,
		arrowScrollOnHover			: false,
		trackClickSpeed				: 0,
		trackClickRepeatFreq		: 70,
		verticalArrowPositions		: 'split',
		horizontalArrowPositions	: 'split',
		enableKeyboardNavigation	: true,
		hideFocus					: false,
		keyboardSpeed				: 0,
		initialDelay                : 300,        // Delay before starting repeating
		speed						: 30,		// Default speed when others falsey
		scrollPagePercent			: .8		// Percent of visible area scrolled when pageUp/Down or track area pressed
	};

},this));;/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.9
 *
 * Requires: jQuery 1.2.2+
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.9',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
        },

        getLineHeight: function(elem) {
            return parseInt($(elem)['offsetParent' in $.fn ? 'offsetParent' : 'parent']().css('fontSize'), 10);
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));

;/**
 * @author trixta
 * @version 1.2
 */
(function($){

var mwheelI = {
			pos: [-260, -260]
		},
	minDif 	= 3,
	doc 	= document,
	root 	= doc.documentElement,
	body 	= doc.body,
	longDelay, shortDelay
;

function unsetPos(){
	if(this === mwheelI.elem){
		mwheelI.pos = [-260, -260];
		mwheelI.elem = false;
		minDif = 3;
	}
}

$.event.special.mwheelIntent = {
	setup: function(){
		var jElm = $(this).bind('mousewheel', $.event.special.mwheelIntent.handler);
		if( this !== doc && this !== root && this !== body ){
			jElm.bind('mouseleave', unsetPos);
		}
		jElm = null;
        return true;
    },
	teardown: function(){
        $(this)
			.unbind('mousewheel', $.event.special.mwheelIntent.handler)
			.unbind('mouseleave', unsetPos)
		;
        return true;
    },
    handler: function(e, d){
		var pos = [e.clientX, e.clientY];
		if( this === mwheelI.elem || Math.abs(mwheelI.pos[0] - pos[0]) > minDif || Math.abs(mwheelI.pos[1] - pos[1]) > minDif ){
            mwheelI.elem = this;
			mwheelI.pos = pos;
			minDif = 250;
			
			clearTimeout(shortDelay);
			shortDelay = setTimeout(function(){
				minDif = 10;
			}, 200);
			clearTimeout(longDelay);
			longDelay = setTimeout(function(){
				minDif = 3;
			}, 1500);
			e = $.extend({}, e, {type: 'mwheelIntent'});
            return ($.event.dispatch || $.event.handle).apply(this, arguments);
		}
    }
};
$.fn.extend({
	mwheelIntent: function(fn) {
		return fn ? this.bind("mwheelIntent", fn) : this.trigger("mwheelIntent");
	},
	
	unmwheelIntent: function(fn) {
		return this.unbind("mwheelIntent", fn);
	}
});

$(function(){
	body = doc.body;
	//assume that document is always scrollable, doesn't hurt if not
	$(doc).bind('mwheelIntent.mwheelIntentDefault', $.noop);
});
})(jQuery);
;
(function(plugin,window){
    var factory = function($){
        return plugin($, window);
    }
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery','slide','mousewheel','jscrollpane'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        window.gallery = factory(jQuery);
    }
}(function($,window){
    function gallery(data){
        var dataSource = data;
        if(!dataSource){
            alert("请提供有效的数据源");
            return
        }
        var $thumbSlide = $("#thumbSlide");
        var $thumbSlideTab = $("#thumbSlideTab");
        var $thumbSlideText = $("#thumbSlideText");
        var $thumbnailMask = $(".thumbnail-image-mask",$thumbSlideTab);
        var $slidesjsThumbnail = $("ul","#thumbSlideTab");
        var $item;
        var  $thumbSlideBox = $(".thumbSlide-tab-box");
        var maskleft = parseInt($thumbnailMask.css("left"));
        //放大图标
        var $zoomIco = $(".image-zoom-ico",$thumbSlide.parent());
        //左右箭头遮罩
        var $slideMask = $(".slide-arrow",$thumbSlide.parent());

        var $slideThumbBox = $(".slidesjs-thumbnail-box");
        //空的缩略图容器占位符
        var $slideThumbEmpty = $(".slidesjs-thumbnail-box-empty");
        var throttleTimeout;

        var prevBtn = $(".prev",".thumbSlide-tab-box");
        var nextBtn = $(".next",".thumbSlide-tab-box");
        var $navigationPrev = $("#slidesjs-previous");
        var $navigationNext = $("#slidesjs-next");

        var $title = $("#slideModuleTile");

        //当前索引
        var index = 0;

        //滚动的实例对象
        var scrollApi;
        //幻灯片实例对象
        var slideApi;
        var speed = 100;
        var itemWidth = 139;//缩略图的宽度
        var thumbnailWidth; //缩略图容器的宽度
        var oldSelect = 0;//记录上一次的选择

        var showItems;//可显示的数量
        var sum = dataSource.length;//总数量
        var lastIndex = sum - 1;//最后一项
        var middleIndex;//开始状态的中间量索引值
        var maxIndex;//末端中间量索引值
        var index = 0;//index 当前的索引
        var moveNumber;//可移动的数量
        var thumbnailSumWidth = sum * itemWidth;
        var moveDistance;//移动距离
        var halfItem;
        var containerWidth;
        var oldScrollPosition = 0;//滚动之前的滚动数值
        var scrollPosition = 0;//当前的滚动数值
        var Difference;//滚动差值
        setTitleNumber(index);
        calculateSlideHeight();
        setPosition();
        createSlide();
        createThumb();

        scrollPaneInit();
        slideInit();
        eventHandle();
        //根据屏幕大小设置宽度
        function setPosition(){
            var $module = $(".image-show-module");
            var  $listBox = $(".item-image-list",".slidesjs-thumbnail-box");
            var listBoxWidth = $listBox.eq(0).width();
            var arrowWidth = 100;
            containerWidth =$module.width() - (listBoxWidth*2) - 60;
            thumbnailWidth = containerWidth-100;
            $thumbSlideBox.css({
                width:containerWidth,
                marginLeft:-containerWidth/2
            })
            $thumbSlideTab.css({
                width:thumbnailWidth
            })
            caculateShowItem();
        }
        function calculateSlideHeight(){
            var windowH = $(window).height();
//        var $listBox = $(".item-image-list",".slidesjs-thumbnail-box");
//        var textHeight = $thumbSlideText.outerHeight();
//        var listHeight = $listBox.outerHeight()+30;
            var textHeight = 67;
            var listHeight = 144;
            var surplusHeight = windowH - (156 + textHeight + listHeight);
            $thumbSlide.height(surplusHeight);
            refreshSlide(surplusHeight);
            $slideMask.height(surplusHeight);
            removeThumbEmpty();
        }
        function refreshSlide(surplusHeight){
            if(slideApi){
                slideApi.options.height = surplusHeight;
                slideApi.update();
            }
        }
        //删除缩略图占位符
        function removeThumbEmpty(){
            $slideThumbBox.removeClass("fixed");
            $slideThumbEmpty.remove();
            $thumbSlideText.removeClass("fixed");
        }


        //判断开端和末端移动的边界
        function judgeIndex(index) {
            var remainItem = 0;
            var top;
            var bottom;
            var isTop = false;
            var isBottom = false;
            if (showItems % 2 == 0) {
                if (index <= oldSelect) {
                    top = oldSelect - middleIndex;
                } else {
                    bottom = oldSelect + middleIndex;
                }
            }else {
                remainItem = (showItems - 1) / 2;
                if (index <= oldSelect) {
                    top = oldSelect - middleIndex;
                    if(oldSelect == maxIndex){
                        top = oldSelect - (middleIndex+1);
                    }
                } else {
                    top = middleIndex;
                    bottom = (oldSelect + remainItem) + 1;
                }
            }
            if (top <= 0) {
                isTop = true;
            }
            if (bottom >= lastIndex) {
                isBottom = true;
            }

            return {
                isTop: isTop,
                isBottom: isBottom,
                top: top,
                bottom: lastIndex - bottom
            }
        }

        // 末端中间量索引值
        function getMaxMiddleIndex() {
            var items;
            if (showItems % 2 == 0) {
                items = showItems / 2;
            }else {
                items = (showItems-1) / 2;
            }
            maxIndex = lastIndex - items;
        }

        //過濾索引值
        function filterIndex(number) {
            if (number < 0) {
                index = 0;
            }
            if (number > lastIndex) {
                index = lastIndex;
            }
        }

        //获取剩余的宽度
        function getHalfItem(){
            if(showItems * itemWidth < containerWidth){
                halfItem =  containerWidth - showItems * itemWidth-4;
            }else {
                halfItem = 0;
            }
        }
        /*
         * 可显示数量: showItems
         * 开始中间值: middleIndex
         * 末端中间值:maxIndex
         * */
        function caculateShowItem() {
            //可移动图片的数量
            showItems =  Math.floor(thumbnailWidth / itemWidth);
            middleIndex = Math.floor(showItems / 2);
            if(middleIndex == 0){
                middleIndex = 1;
            }
            getMaxMiddleIndex();
            getHalfItem();
//            console.log("可显示数量" + showItems);
//            console.log("开始中间值" + middleIndex);
//            console.log("末端中间值" + maxIndex);
        }
        //图集的文本
        function setText(index){
            var current = index+1;
            var allLength = dataSource.length;
            var $textBox = $thumbSlideText.find(".image-title");
            var $current = $thumbSlideText.find(".current");
            var $all = $thumbSlideText.find(".all");
            var $slash = $thumbSlideText.find(".slash");
            judgeTextEmpty(index);
            $current.text(current);
            $all.text(allLength);
            $slash.text("/");
            $textBox.text(dataSource[index].text);
        }
        //设置图集title页码的显示
        function setTitleNumber(index){
            var current = index+1;
            var allLength = dataSource.length;
            var $current = $title.find(".current");
            var $all = $title.find(".all");
            var $slash = $title.find(".slash");
            $current.text(current);
            $all.text(allLength);
            $slash.text("/");
        }
        function judgeTextEmpty(index){
            if(dataSource[index].text == ""){
                $thumbSlideText.addClass("empty")
            }else {
                $thumbSlideText.removeClass("empty")
            }
        }
        //构造幻灯片图片
        function createSlide(){
            $.each(dataSource,function(index,item){
                var banner = $("<div></div>",{
                    "class":"banner bigLoading"
                }).appendTo($thumbSlide);
                var bannerLink = $("<div class='box' style='position: relative'></div>",{
                    "href":item.url
                }).appendTo(banner);
            })
        }
        //构造缩略图
        function createThumb(){
            var ul = $("<ul></ul>").appendTo($thumbSlideTab);
            $.each(dataSource,function(index,item){
                var li = $("<li></li>",{
                    "class":"slidesjs-thumbnail-item smallLoading"
                }).appendTo(ul);
                loadThumalImage(index);
            });
            $(ul).width(thumbnailSumWidth);
            $item = $(".slidesjs-thumbnail-item",$thumbSlideTab);
        }
        //图片预加载
        function loadImage(index){
            var $imgDom = $("<img />");
            var $banner = $(".banner",$thumbSlide);
            var $bannerLink = $banner.find(".box");
            $imgDom.bind("load", function() {
                var imageWidth = $imgDom[0].width;
                var imageHeight = $imgDom[0].height;
                $imgDom.hide();
                setText(index);
                setTitleNumber(index);
                calculateSlideHeight();
                $imgDom.data("width",imageWidth);
                $imgDom.data("height",imageHeight);
                var parentWidth = $thumbSlide.width();
                var  parentHeight = $thumbSlide.height();
                var imageData = resize_image($imgDom,imageWidth,imageHeight,parentWidth,parentHeight);
                createZoomBox(imageData,index);
                setZoomIco(index);
                $bannerLink.eq(index).append($imgDom);
                $banner.eq(index).removeClass("bigLoading");
                $imgDom.fadeIn();
                $banner.eq(index).data("loaded",true);
                thumbnailGroupMove(index);
            }).bind("error",function(){
                    $bannerLink.eq(index).html("图片错误");
                    setText(index);
                    setTitleNumber(index);
                    $banner.data("loaded",true);
                }).attr("src", dataSource[index].image);
        }
        //图片缩放在容器范围内 按照小的比例进行缩放
        function resize_image(self,image_width,image_height,parent_width,parent_height) {
            var  image = self;
            var imageWidth,imageHeight,marginT,marginL;
            if( image_width <= parent_width  && image_height <= parent_height){
                imageWidth = image_width;
                imageHeight = image_height;
                var marginT = Math.ceil(parent_height/2 - imageHeight/2);
                var marginL = Math.ceil(parent_width/2 - imageWidth/2);
                image.css({
                    'width' : imageWidth+"px",
                    'height': imageHeight+"px"
                })
                return {
                    width:imageWidth,
                    height:imageHeight,
                    'marginTop':marginT,
                    'marginLeft':marginL
                }
            }
            if (parent_width / image_width > parent_height / image_height) {
                imageHeight = parent_height;
                imageWidth = image_width*parent_height / image_height;
                marginT = Math.ceil(parent_height/2 - imageHeight/2);
                marginL = Math.ceil(parent_width/2 - imageWidth/2);
            }
            else {
                imageWidth = parent_width;
                imageHeight = image_height*parent_width / image_width;
                marginT =  Math.ceil(parent_height/2 - imageHeight/2);
                marginL =  Math.ceil(-(parent_width/2 - imageWidth/2));
            }
            image.css({
                'width' : imageWidth+"px",
                'height': imageHeight+"px"
            })
            return {
                width:imageWidth,
                height:imageHeight,
                'marginTop':marginT,
                'marginLeft':marginL
            }
        }
        //缩略图按比例缩放 按照大的比例进行缩放
        function resizeThumail(self, image_width, image_height, parent_width, parent_height) {
            var image = self;
            var imageWidth, imageHeight, marginT, marginL;
            if (image_width <= parent_width && image_height <= parent_height) {
                imageWidth = image_width;
                imageHeight = image_height;
                var marginT = Math.ceil(parent_height / 2 - imageHeight / 2);
                var marginL = Math.ceil(parent_width / 2 - imageWidth / 2);
            }
            if (parent_width / image_width > parent_height / image_height) {
                imageHeight = image_height * parent_width / image_width;
                imageWidth = image_width * parent_width / image_width;
                var marginT = Math.ceil(parent_height / 2 - imageHeight / 2);
                var marginL = Math.ceil(-(parent_width / 2 - imageWidth / 2));
            }
            else {
                imageWidth = image_width * parent_height / image_height;
                imageHeight = image_height * parent_height / image_height;
                marginT = Math.ceil(parent_height / 2 - imageHeight / 2);
                marginL = Math.ceil(parent_width / 2 - imageWidth / 2);
            }
            image.css({
                'width': imageWidth + "px",
                'height': imageHeight + "px",
                'marginLeft': marginL + "px"
            })
            return {
                width: imageWidth,
                height: imageHeight
            }
        }
        //图片预加载
        function loadThumalImage(index){
            var $imgDom = $("<img />");
            var $banner = $(".slidesjs-thumbnail-item",$thumbSlideTab);
            $imgDom.bind("load", function () {
                var imageWidth = $imgDom[0].width;
                var imageHeight = $imgDom[0].height;
                $imgDom.hide();
                $imgDom.data("width", imageWidth);
                $imgDom.data("height", imageHeight);
                var parentWidth = $banner.eq(0).width();
                var parentHeight = $banner.eq(0).height();
                resizeThumail($imgDom, imageWidth, imageHeight, parentWidth, parentHeight);
                $banner.eq(index).append($imgDom);
                $banner.eq(index).removeClass("smallLoading");
                $imgDom.fadeIn();
                $banner.eq(index).data("loaded", true);
            }).bind("error", function () {
                    $banner.eq(index).html("图片错误");
                    setText(index);
                    setTitleNumber(index);
                    $banner.data("loaded", true);
                }).attr("src", dataSource[index].thumbnail);//.image);
        }
        //图片容器构造
        function createZoomBox(data,index){
            var $banner = $(".banner",$thumbSlide);
            var $bannerBox= $banner.find(".box");
            $bannerBox.eq(index).css({
                'width' : data.width+"px",
                'height': data.height+"px",
                'marginTop':data.marginTop+"px",
                'marginLeft':data.marginLeft+"px"
            })
        }
        //放大图标
        function setZoomIco(index){
            var icoWidth = $zoomIco.width();
            var $banner = $(".banner",$thumbSlide).eq(index);
            var $box = $banner.find(".box");
            var left = parseInt($box.css("marginLeft"));
            var top = parseInt($box.css("marginTop"));
            var boxWidth = $box.width();
            var imageUrl =  dataSource[index].url;
            $zoomIco.attr("href",imageUrl);
            $zoomIco.css({
                display:"block",
                position:"absolute",
                zIndex:15,
                left:boxWidth + left - icoWidth,
                top: top
            })
        }
        //幻灯片插件初始化
        function slideInit(){
            var w = $thumbSlide.width();
            var h = $thumbSlide.height();
            //幻灯片对象
            $thumbSlide.slidesjs({
                width:w,
                height:h,
                tabMask: {
                    active:true,
                    direction: "left",
                    element:$thumbnailMask
                },
                thumbnail:{
                    active:true,
                    element:$thumbSlideTab
                },
                navigation: {
                    active: false
                },
                pagination: {
                    active: false
                },
                effect: {
                    slide: {
                        speed: 300
                    },
                    fade: {
                        speed: 300,
                        crossfade: true
                    }
                },
                play: {
                    active: false,
                    effect: "slide",
                    interval: 3000,
                    auto: false,
                    swap: true,
                    pauseOnHover: false,
                    restartDelay: 2500
                },
                callback:{
                    loaded:function(){
                        index = 0;
                        loadImage(index);
                    },
                    start:function(){
                        //隐藏放大图标
                        $zoomIco.hide();
                    },
                    complete:function(){
                        var thumbSlideItem = $(".banner",$thumbSlide);
                        if(slideApi){
                            index = slideApi.data.current;
                        }else {
                            //幻灯片实例对象
                            slideApi =  $thumbSlide.data("plugin_slidesjs");
                        }
                        if(!thumbSlideItem.eq(index).data("loaded")){
                            loadImage(index);
                        }else {
                            setText(index);
                            setTitleNumber(index);
                            calculateSlideHeight();
                            initImage(index);
                            thumbnailGroupMove(index);
                        }
                        isShowNextImageList(index);
                    }
                }
            });
            //幻灯片实例对象
            slideApi =  $thumbSlide.data("plugin_slidesjs");
        }
        //滚动条初始化
        function scrollPaneInit(){
            $thumbSlideTab.jScrollPane({
                showArrows:true,
                autoReinitialise: true
            })
            //滚动的实例对象
            scrollApi = $thumbSlideTab.data('jsp');
        }

        function getOldScrollPosition(){
            oldScrollPosition = scrollApi.getContentPositionX();
            eventHandle();
        }
        //事件绑定
        function eventHandle(){
            nextBtn.off().on("click",nextGroupMethod);
            prevBtn.off().on("click",prevGroupMethod);
            $navigationNext.off().on("click",nextMethod);
            $navigationPrev.off().on("click",prevMethod);
            $(window).unbind("resize.scollSlide").bind("resize.scollSlide",function(){
                var normalItem = showItems;
                if (oldSelect == 0) {
                    oldSelect = middleIndex;
                }
                var old = oldSelect;
                calculateSlideHeight();
                setPosition();
                initImage(index);
                if(showItems - normalItem > 0){
                    oldSelect = old + Math.floor((showItems - normalItem)/2);
                }else {
                    oldSelect = old - Math.floor((normalItem - showItems)/2);
                }
            })
        }
        //图片大小初始化
        function initImage(index){
            var $banner = $(".banner",$thumbSlide);
            var $image = $banner.eq(index).find("img");
            var image_width = $image.data("width");
            var image_height = $image.data("height");
            var  parent_width =$thumbSlide.width();
            var  parent_height =$thumbSlide.height();
            var imageData = resize_image($image,image_width,image_height,parent_width,parent_height);
            createZoomBox(imageData,index);
            setZoomIco(index);
        }
//    var prevBtn = $(".prev",".thumbSlide-tab-box");
//    var nextBtn = $(".next",".thumbSlide-tab-box");
//    var $navigationPrev = $("#slidesjs-previous");
//    var $navigationNext = $("#slidesjs-next");
        //切换下一张图
        function nextMethod(e){

            e.stopPropagation();
            $navigationNext.unbind("click");
            index++;
            if(index > lastIndex){
                return
            }
            slideApi.goto(index+1);
        }
        //切换上一张图
        function prevMethod(e){
            e.preventDefault();
            e.stopPropagation();
            $navigationPrev.unbind("click");
            index = slideApi.data.current+1;
            index--;
            slideApi.goto(index);
        }
        //切换下一组图
        function nextGroupMethod(e){
            e.preventDefault();
            e.stopPropagation();
            nextBtn.unbind("click");
            moveNumber = middleIndex;
            var scrollDistance = moveNumber * itemWidth;
            scrollApi.scrollByX(scrollDistance,speed,function(){
                eventHandle();
            });
        }
        //切换上一组图
        function prevGroupMethod(e){
            e.preventDefault();
            e.stopPropagation();
            var scrollDistance = 0;
            prevBtn.unbind("click");
            moveNumber = middleIndex;
            var scrollDistance = moveNumber * itemWidth;
            scrollApi.scrollByX(-scrollDistance,speed,function(){
                eventHandle();
            });
        }
        //缩略图移动
        function thumbnailGroupMove(index) {
            var number = parseInt(index);
            var scrollDistance = 0;
            if (oldSelect == 0) {
                oldSelect = middleIndex;
            }
            var judge = judgeIndex(number);
            if (number >= oldSelect) {
                if (!judge.isBottom) {
                    moveNumber = number - oldSelect;
                    oldSelect = number;
                    if (judge.bottom < moveNumber) {
                        oldSelect = maxIndex;
                        moveNumber = judge.bottom;
                    }
                    scrollDistance = moveNumber * itemWidth;
                } else {
                    oldSelect = maxIndex;
                    scrollDistance = halfItem;
                }
                scrollPosition =  scrollApi.getContentPositionX();
                if(Math.abs(scrollPosition - oldScrollPosition) > 0){
                    Difference = scrollPosition - oldScrollPosition;
                    if(number == lastIndex){
                        scrollApi.scrollByX(scrollDistance - Difference+halfItem,speed,getOldScrollPosition);
                    }else{
                        scrollApi.scrollByX(scrollDistance - Difference,speed,getOldScrollPosition);
                    }
                }else {
                    scrollApi.scrollByX(scrollDistance,speed,getOldScrollPosition);
                }
            } else {
                if (!judge.isTop) {
                    moveNumber = oldSelect - number;
                    oldSelect = number;
                    if (judge.top < moveNumber) {
                        oldSelect = middleIndex;
                        moveNumber = judge.top;
                    }
                    scrollDistance = moveNumber * itemWidth;
                }else {
                    oldSelect = middleIndex;
                    scrollDistance = halfItem;
                }
                scrollPosition =  scrollApi.getContentPositionX();
                if(Math.abs(scrollPosition - oldScrollPosition) > 0){
                    Difference = scrollPosition - oldScrollPosition;
                    if(number == 0){
                        scrollApi.scrollToX(0,speed,getOldScrollPosition);
                    }else{
                        scrollApi.scrollByX(-(scrollDistance + Difference),speed,getOldScrollPosition);
                    }
                } else {
                    scrollApi.scrollByX(-scrollDistance,speed,getOldScrollPosition);
                }
            }
        }
        //判断是否是最后一张图 如果是最后一张图片则显示下一个图集
        function isShowNextImageList(){
            //当前点击的对象处于图片集的最后一张
            if(index+1 == slideApi.data.total){
                $navigationNext.addClass("next-list");
                $($navigationNext).attr("href", $("#NextAlbums").attr("href"));
            }else {
                $navigationNext.removeClass("next-list");
                $($navigationNext).attr("href","javascript:void(0)");
            }
        }
    }
    return gallery;
},this))



